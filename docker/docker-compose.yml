name: okletsdoit
services:
  traefik:
    image: traefik:v3.4
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web-secure.address=:443"
      - "--entrypoints.web.http.redirections.entrypoint.to=web-secure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--entrypoints.web.http.redirections.entrypoint.permanent=true"
      - "--log.level=INFO"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080" # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    restart: unless-stopped
  nginx:
    image: nginx:latest
    volumes:
      - ./nginx/default.conf.template:/etc/nginx/templates/default.conf.template
    environment:
      - DJANGO_HOST=django-server
      - DJANGO_PORT=8000
      - NGINX_SERVER_NAME=dev.internal
      - NGINX_CLIENT_MAX_BODY_SIZE=100M
      - NGINX_ENVSUBST_TEMPLATE_SUFFIX=.template
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nginx-secure.entrypoints=web-secure"
      - "traefik.http.routers.nginx-secure.rule=Host(`dev.internal`)"
      - "traefik.http.routers.nginx-secure.tls=true"
      - "traefik.http.services.nginx-secure.loadbalancer.server.port=80"
    depends_on:
      - traefik
    expose:
      - "80"
    restart: unless-stopped
  postgres:
    image: postgres:17.4
    expose:
      - "5432"
    volumes:
      - ../_persist/postgres:/var/lib/postgresql/data
    env_file:
      - ../app/.env
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER}" ]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
  redis:
    image: redis:7.0
    command: [ "redis-server", "--save", "60", "1", "--loglevel", "warning" ]
    volumes:
      - ../_persist/redis:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
  django-server:
    build:
      context: ..
      dockerfile: ./docker/Dockerfile
      target: development
    volumes:
      - ../app:/app/app
    environment:
      - CONTAINER_ROLE=server
    env_file:
      - ../app/.env
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8000/health/ || exit 1" ]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 40s
    labels:
      - "traefik.enable=false"
  beats:
    build:
      context: ..
      dockerfile: ./docker/Dockerfile
      target: development
    volumes:
      - ../app:/app/app
    environment:
      - CONTAINER_ROLE=beats
    env_file:
      - ../app/.env
    depends_on:
      - django-server
      - postgres
    labels:
      - "traefik.enable=false"
    restart: unless-stopped
  worker:
    build:
      context: ..
      dockerfile: ./docker/Dockerfile
      target: development
    volumes:
      - ../app:/app/app
    environment:
      - CONTAINER_ROLE=worker
    env_file:
      - ../app/.env
    depends_on:
      - django-server
      - postgres
    labels:
      - "traefik.enable=false"
    restart: unless-stopped
