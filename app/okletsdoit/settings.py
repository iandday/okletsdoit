"""
Django settings for okletsdoit project.

Generated by 'django-admin startproject' using Django 5.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
from pathlib import Path
import socket
from pythonjsonlogger.json import JsonFormatter

import environ
from csp.constants import NONE
from csp.constants import SELF
from csp.constants import NONCE

BASE_DIR = Path(__file__).resolve().parent.parent

env = environ.Env(
    # set casting, default value
    DEBUG=(bool, False),
    STATIC_ROOT=(Path, "/app/static"),
    MEDIA_ROOT=(Path, "/app/media"),
    TIME_ZONE=(str, "UTC"),
    ALLOWED_HOSTS=(list, []),
    DJANGO_LOG_LEVEL=(str, "DEBUG"),
    DJANGO_ACCOUNT_ALLOW_REGISTRATION=(bool, True),
    DJANGO_ACCOUNT_ALLOW_SOCIAL_REGISTRATION=(bool, True),
)
env.read_env(BASE_DIR / ".env", overwrite=True)

SECRET_KEY = env("SECRET_KEY")
DEBUG = env("DEBUG")

ALLOWED_HOSTS = env.list("ALLOWED_HOSTS")

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.admindocs",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.humanize",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django_extensions",
    "health_check",
    "health_check.db",
    "health_check.storage",
    "health_check.contrib.migrations",
    #'health_check.cache',
    #'health_check.contrib.celery',
    #'health_check.contrib.celery_ping',
    #'health_check.contrib.redis',
    "widget_tweaks",
    "slippers",
    "allauth_ui",
    "allauth",
    "allauth.account",
    # "allauth.mfa",
    "allauth.socialaccount",
    "allauth.socialaccount.providers.google",
    "allauth.socialaccount.providers.openid_connect",
    "import_export",  # https://django-import-export.readthedocs.io/en/latest/
    "simple_history",  # https://django-simple-history.readthedocs.io/en/latest/quick_start.html#install
    "csp",
    "core",
    "users",
    "expenses",
    "contacts",
    "list",
    "deadline",
    "guestlist",
    "shared_helpers",
]

if DEBUG:
    INSTALLED_APPS += [
        "debug_toolbar",  # https://django-debug-toolbar.readthedocs.io/en/latest/
    ]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "csp.middleware.CSPMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "allauth.account.middleware.AccountMiddleware",
    "simple_history.middleware.HistoryRequestMiddleware",
]
if DEBUG:
    MIDDLEWARE += [
        "debug_toolbar.middleware.DebugToolbarMiddleware",
    ]


ROOT_URLCONF = "okletsdoit.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [Path(BASE_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "okletsdoit.context_processors.site_vars",
            ],
        },
    },
]

WSGI_APPLICATION = "okletsdoit.wsgi.application"


DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": env("POSTGRES_DB"),
        "USER": env("POSTGRES_USER"),
        "PASSWORD": env("POSTGRES_PASSWORD"),
        "HOST": env("POSTGRES_HOST"),
        "PORT": env("POSTGRES_PORT"),
    }
}

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
        },
    },
    "loggers": {
        "django": {
            "handlers": ["console"],
            "level": env.str("DJANGO_LOG_LEVEL"),
            "propagate": True,
        },
    },
    "formatters": {
        "json": {
            "()": JsonFormatter,
            "datefmt": "%Y-%m-%dT%H:%M:%S%z",
            "json_default": "django.utils.timezone.localtime",
        },
    },
}

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]

AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
    "allauth.account.auth_backends.AuthenticationBackend",
]
AUTH_USER_MODEL = "users.User"
LOGIN_REDIRECT_URL = "/"
LOGIN_URL = "account_login"

# django-allauth
# https://docs.allauth.org/en/latest/account/configuration.html
ACCOUNT_ALLOW_REGISTRATION = env("DJANGO_ACCOUNT_ALLOW_REGISTRATION")
ACCOUNT_ALLOW_SOCIAL_REGISTRATION = env("DJANGO_ACCOUNT_ALLOW_SOCIAL_REGISTRATION")
ACCOUNT_LOGIN_METHODS = {"email"}
ACCOUNT_SIGNUP_FIELDS = ["email*", "password1*", "password2*"]
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_USER_MODEL_USERNAME_FIELD = None
ACCOUNT_EMAIL_VERIFICATION = "none"
ACCOUNT_FORMS = {"signup": "users.forms.UserSignupForm"}
ACCOUNT_ADAPTER = "users.adapters.AccountAdapter"
SOCIALACCOUNT_ONLY = True
SOCIALACCOUNT_ADAPTER = "users.adapters.SocialAccountAdapter"
SOCIALACCOUNT_FORMS = {"signup": "users.forms.UserSocialSignupForm"}
SOCIAL_PROVIDERS = "allauth.socialaccount.providers.openid_connect"
SOCIALACCOUNT_PROVIDERS = {
    "openid_connect": {
        "APPS": [
            {
                "provider_id": "authentik",
                "name": "Authentik",
                "client_id": env.str("AUTHENTIK_CLIENT_ID"),
                "secret": env.str("AUTHENTIK_CLIENT_SECRET"),
                "settings": {
                    "server_url": env.str("AUTHENTIK_URL"),
                },
            },
        ],
    },
}
# ADMIN
ADMIN_URL = "admin/"

LANGUAGE_CODE = "en-us"
TIME_ZONE = env("TIMEZONE")
USE_I18N = False
USE_TZ = True


STATIC_URL = "/static/"
MEDIA_URL = "/media/"
STATIC_ROOT = env.path("STATIC_ROOT")
MEDIA_ROOT = env.path("MEDIA_ROOT")
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# HTTPS redirect
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
SECURE_SSL_REDIRECT = True
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True

CSRF_TRUSTED_ORIGINS = env.list("DJANGO_CSRF_TRUSTED_ORIGINS")

CONTENT_SECURITY_POLICY = {
    "EXCLUDE_URL_PREFIXES": ["/excluded-path/"],
    "DIRECTIVES": {
        "default-src": [SELF],
        "script-src": [SELF, NONCE, "code.jquery.com", "cdn.jsdelivr.net"],
        "style-src": [
            SELF,
            NONCE,
            "cdnjs.cloudflare.com",
            "cdn.ckeditor.com",
            "fonts.googleapis.com",
            "cdn.datatables.net",
            "'unsafe-inline'",  # Required for daisyUI 5 theme switching
        ],
        "font-src": [
            SELF,
            "data:",
            "cdnjs.cloudflare.com",
            "fonts.gstatic.com",
        ],
        "img-src": [SELF, "data:", "https:"],
        "connect-src": [SELF, "https://proxy-event.ckeditor.com"],
        "frame-src": [NONE],
        "object-src": [NONE],
        "base-uri": [SELF],
        "frame-ancestors": [SELF],
        "form-action": [SELF, "https://dev.internal", "https://auth.ianday.me"],
        # "report-uri": "/csp-report/",
        "upgrade-insecure-requests": True,
        "include-nonce": True,
    },
}

# django debug toolbar
INTERNAL_IPS = ["127.0.0.1", "10.0.2.2", "host.docker.internal", "localhost", "dev.internal"]
hostname, _, ips = socket.gethostbyname_ex(socket.gethostbyname(""))
INTERNAL_IPS += [".".join(ip.split(".")[:-1] + ["1"]) for ip in ips]
DEBUG_TOOLBAR_CONFIG = {
    "SHOW_TOOLBAR_CALLBACK": lambda request: env.bool("DJANGO_DEBUG", False),  # type: ignore[arg-type]
    "DISABLE_PANELS": [
        "debug_toolbar.panels.redirects.RedirectsPanel",
        # Disable profiling panel due to an issue with Python 3.12:
        # https://github.com/jazzband/django-debug-toolbar/issues/1875
        "debug_toolbar.panels.profiling.ProfilingPanel",
    ],
    "SHOW_TEMPLATE_CONTEXT": True,
}
